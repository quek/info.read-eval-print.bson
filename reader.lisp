(in-package :info.read-eval-print.bson)

(defun /-reader (stream char)
  (declare (ignore char))
  (let (regex (option ""))
    (setf regex (with-output-to-string (out)
                  (labels ((next ()
                             (read-char stream t nil t)))
                    (loop for c = (next)
                          if (char= #\\ c)
                            do (write-char (next) out)
                          else if (char= #\/ c)
                                 do (when (eql #\i (peek-char nil stream nil nil t))
                                      (read-char stream)
                                      (setf option "i"))
                                    (loop-finish)
                          else
                            do (write-char c out)))))
    (regex regex option)))

(defun |:-reader| (stream char)
  (declare (ignore stream char))
  '|:|)

(defun |,-reader| (stream char)
  (declare (ignore stream char))
  '|,|)

(defun |{-reader| (stream char)
  (declare (ignore char))
  (read-delimited-list #\} stream t))

(defun read-from-string-to-bson (string)
  (let ((*readtable* (copy-readtable nil)))
    (setf (readtable-case *readtable*) :preserve)
    (setf *read-eval* nil)
    (set-macro-character #\/ #'/-reader t)
    (set-macro-character #\: #'|:-reader|)
    (set-macro-character #\, #'|,-reader|)
    (set-macro-character #\{ #'|{-reader|)
    (set-macro-character #\} (get-macro-character #\)))
    (labels ((f (xs acc)
               (cond ((endp xs)
                      (nreverse acc))
                     ((consp (car xs))
                      (f (cdr xs) (cons (cons 'bson (f (car xs) nil)) acc)))
                     ((member (car xs) '(|:| |,|))
                      (f (cdr xs) acc))
                     ((symbolp (car xs))
                      (f (cdr xs) (cons `',(car xs) acc)))
                     (t (f (cdr xs) (cons (car xs) acc))))))
      (eval (cons 'bson (f (read-from-string string nil nil) nil))))))
#|
(read-from-string-to-bson "{pt: /^\\/facili:,tiets/i, uid: \"admin\", time: {&gt: 1}}")
;;â‡’ {"pt": /^/facili:,tiets/i, "uid": "admin", "time": {"&gt": 1}}
|#
